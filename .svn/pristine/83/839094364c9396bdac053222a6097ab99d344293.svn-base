using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Text;
using System.Data.Common;
using System.Data.Entity;
using System.Data.Objects;
using CST.Prdn.Data;
using System.Data.SqlClient;

namespace PrdnTest
{
    class Program
    {
        static void Main(string[] args)
        {
            PrdnOrdRunList();
        }

        public class PrdnRunViewModel
        {
            public decimal ID { get; set; }
            public string PrdnOrderNo { get; set; }
            public decimal PrdnTypeID { get; set; }
            public string Description { get; set; }
            public bool HasJobs { get; set; }
            public string ProdTypeCD { get; set; }
            public string ProdTypeDescr { get; set; }
        }


        static void PrdnOrdRunList()
        {
            using (PrdnEntities PrdnDBContext = new PrdnEntities())
            {
                var runs = from r in PrdnDBContext.ProductionRuns
                           orderby r.PrdnOrderNo, r.PrdnType.SortOrder, r.PrdnType.Code
                           select new PrdnRunViewModel
                           {
                               ID = r.ID,
                               PrdnOrderNo = r.PrdnOrderNo,
                               PrdnTypeID = r.PrdnTypeID,
                               Description = r.Description,
                               HasJobs = r.Jobs.Any(),
                               ProdTypeCD = r.PrdnType.ProdTypeCD,
                               ProdTypeDescr = "(" + r.PrdnType.ProdTypeCD + ") " + r.PrdnType.ProductType.Description
                           };

                runs = from r in runs
                           where r.ID == 10
                           select r;

                ObjectQuery oq1 = (ObjectQuery)runs;
                string s = oq1.ToTraceString();
                Console.WriteLine(s);

                Console.ReadLine();

            }

        }

        static void PrdnOrdRunLookup()
        {
            string prdnOrderNo = "512";
            string typeCd = "A"; 
            string prodTypeCD = "300";
            //bool inclucdePrdnOrNos = true;

            using (PrdnEntities PrdnDBContext = new PrdnEntities())
            {
                var runs = from r in PrdnDBContext.ProductionRuns
                            .Include("PrdnOrder")
                            .Include("PrdnType")
                             where r.PrdnOrder.OrderNo.StartsWith(prdnOrderNo)
                             select r;

                if (typeCd != null)
                {
                    runs = from r in runs
                           where r.PrdnType.Code.StartsWith(typeCd)
                           select r;
                }

                if (prodTypeCD != null)
                {
                    runs = from r in runs
                           where r.PrdnType.ProdTypeCD == prodTypeCD
                           select r;
                }

                runs = from r in runs
                       orderby r.PrdnOrder.OrderNo
                       select r;
                
                var list = from r in runs.ToList()
                           select new
                           {
                               r.PrdnOrder.OrderNo,
                               r.PrdnOrder.ShipDay,
                               runID = r.ID.ToString(),
                               prdType = r.PrdnType.Code,
                               PrdnTypeDescr = r.PrdnType.Description
                           };


                foreach (var l in list)
                {
                    Console.WriteLine(l.OrderNo
                        +" "+ l.ShipDay.ToString()
                        +" "+ l.runID
                        +" "+ l.prdType
                        +" "+ l.PrdnTypeDescr
                        );
                }

                Console.ReadLine();
            }
        }

        static void NullReqAtt()
        {
            using (PrdnEntities PrdnDBContext = new PrdnEntities())
            {
                var att = from a in PrdnDBContext.RequestAttachments
                          where a.ID == "277712" && a.Attachment != null
                          select new
                          {
                              a.ID,
                              a.FileName,
                              MimeContentType = a.MimeType.ContentType,
                              MimeSubType = a.MimeTypeCD,
                              a.MimeType,
                          };

                ObjectQuery oq1 = (ObjectQuery)att;
                string s = oq1.ToTraceString();
                Console.WriteLine(s);

                Console.ReadLine();

            }
        }

        static void roles()
        {
            //int userID = 1;
            using (PrdnEntities PrdnDBContext = new PrdnEntities())
            {
                var groups = from u in PrdnDBContext.Users
                             from g in u.Groups
                             where u.ID == 1
                             orderby g.App.Code, g.Code
                             select g;
                
                foreach (var group in groups)
                {
                    Console.WriteLine(group.AppGroupCode);
                }

                Console.ReadLine();
            }
        }
               
        static void groupNotUser()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            int userID = 1;

            var userGroups = from u in PrdnDBContext.Users
                             from g in u.Groups
                             where u.ID == userID
                             select g;

            var exclGroups = from g in PrdnDBContext.Groups
                          where !userGroups.Any(ug => ug.ID == g.ID)
                          select g;

            var srtGrps = from g in exclGroups
                          orderby g.Code
                          select g;

            var exclApps = from a in PrdnDBContext.Apps
                         where exclGroups.Any(gq => gq.AppID == a.ID)
                         select a;

            var srtApps = from a in exclApps
                          orderby a.Code
                          select a;

            ObjectQuery oq1 = (ObjectQuery)exclApps;
            string s = oq1.ToTraceString();
            Console.WriteLine(s);

            Console.ReadLine();
        }

        static void Encrypt()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            string crypt = PrdnDBContext.EncryptedStr("PASS");

            Console.WriteLine(crypt);

            string plain = PrdnDBContext.DecryptedStr(crypt);


            Console.WriteLine(plain);
            Console.ReadLine();
        }

        private static void uerGroups()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();


            var groupUsers = from g in PrdnDBContext.Groups
                        from u in g.Users
                        where g.ID == 1
                        select u;

            //groupUsers.Any(gu => gu.ID == 22);

            var users = from u in PrdnDBContext.Users
                        where !groupUsers.Any(gu => gu.ID == u.ID)
                        select u;

            ObjectQuery oq1 = (ObjectQuery)users;
            string s = oq1.ToTraceString();
            Console.WriteLine(s);

            foreach (var u in users)
            {
                Console.WriteLine(u.ID);
            }


            Console.ReadLine();
        }

        public static void ParmInList(PrdnEntities prdnDBContext, out string inClause, out Object[] dbParms, params Object[] values)
        {
            dbParms = new Object[values.Length];
            List<string> parmNames = new List<string>();

            using (var cmdTemp = prdnDBContext.Connection.CreateCommand())
            {
                for (int i = 0; i < values.Length; i++)
                {
                    var parmName = "p" + i.ToString();
                    parmNames.Add(parmName);
                    //parameters[i] = new Oracle.DataAccess.Client.OracleParameter { ParameterName = parmName, Value = values[i] };
                    var dbParam = cmdTemp.CreateParameter();
                    dbParam.ParameterName = parmName;
                    dbParam.Value = values[i];
                    dbParms[i] = dbParam;
                }
            }
            inClause = string.Join(",", parmNames);
        }

        public static string ParmFormatList(int parms)
        { 
            List<string> parmNames = new List<string>();
            for (int i = 0; i < parms; i++)
            {
                parmNames.Add(":p" + i.ToString());
            }
            return string.Join(",", parmNames) ; 
        }

        private static void parama()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();
            
            //string delIDS = "999, 998, 997";

            //string sql = String.Format("DELETE FROM FG_PRDN_JOB_ATTACHMENT WHERE FG_PRDN_JOB_ATT_ID IN ({0})", delIDS);
            //PrdnDBContext.ExecuteStoreCommand(sql);

            //sql = "DELETE FROM jpw WHERE coli IN (:p0, :p1)";
            
            //Object[] parms = {
            //    new Oracle.DataAccess.Client.OracleParameter { ParameterName = ":p0", Value = 1 },
            //    new Oracle.DataAccess.Client.OracleParameter { ParameterName = ":p0", Value = 2 }
            //};
            //PrdnDBContext.ExecuteStoreCommand(sql, parms);

            //string inClause;
            //Object[] parameters;
            
            //ParmInList(PrdnDBContext, out inClause, out parameters, values);
            //string sql = "DELETE FROM jpw WHERE coli IN (" + inClause + ")";
            //PrdnDBContext.ExecuteStoreCommand(sql, parameters);

            //List<int> values = new List<int> { 4, 5, 6 };
            //string sql = "DELETE FROM jpw WHERE coli IN (" + ParmFormatList(values.Count()) + ")";
            //PrdnDBContext.ExecuteStoreCommand(sql, values.Cast<object>().ToArray());

            decimal id = 99999M;
            PrdnDBContext.ExecuteStoreCommand("DELETE FROM FG_PRDN_JOB_ATTACHMENT WHERE FG_PRDN_JOB_ID = :p0", id);
        }

        //PrdnDBContext.ExecuteStoreCommand(sql);
        //var argsDeleteWebUserXref1 = new DbParameter[] {         new SqlParameter { ParameterName = "WebUserId", Value = "" }  ;
        //PrdnDBContext.ExecuteStoreCommand(sql, argsDeleteWebUserXref1);


        private static void ProdImg()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();
      
            DateTime now = DateTime.Now;
            var prods = from p in PrdnDBContext.Products.Include("ProdImages")
                    where p.ProdTypeCD == "620" //&& (p.DiscontinueDt == null || p.DiscontinueDt > now)
                    orderby p.ProdCD
                    select p;

            var prods2 = from p in prods
                        select new {
                            p.ProdCD,
                            p.Description,
                            Display = p.ProdCD + " - " + p.Description,
                            UserDefined = (p.UserTextFlag == PrdnDataHelper.BoolYNTue),
                            p.ProdImages
                        };

            var prods3 = from p in prods2.ToList() 
                         select new {
                            p.ProdCD,
                            p.Description,
                            p.Display,
                            p.UserDefined,
                            ImageID = (from i in p.ProdImages select i.ImageID).FirstOrDefault()
                        };                         
                         

            //ObjectQuery oq1 = (ObjectQuery)prods2;
            //string s = oq1.ToTraceString();
            //Console.WriteLine(s);

            foreach (var prod in prods3)
            {
                Console.WriteLine(prod.Display
                    + " " + prod.ImageID
                    //+ " " + day.ShipPrdnOrders.Sum(p => (int?)p.Runs.Count)
               );
            }

            Console.ReadLine();

        }

        private static void JobTot()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            var order = (from o in PrdnDBContext.CstOrders
                         where o.OrderNo == "2071297"
                         select new
                         {
                             o.CustDeliveryFlag,
                             o.ShipToCustID,
                             o.ShipToName,
                             o.ShipToAddr1,
                             o.ShipToAddr2,
                             o.ShipToAddr3,
                             o.ShipToAddr4,
                             o.ShipToCity,
                             o.ShipToState,
                             o.ShipToPostal,
                             o.ShipToCountry,
                             Tot = o.OrderLines.Sum(l => l.LineTotal) + (o.Tax ?? 0M) + (o.Transport ?? 0M)
                         }).FirstOrDefault();

            Console.WriteLine(order.Tot.ToString());
            Console.ReadLine();

        }

        private static void NextOrd()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            ProductionOrder ord = PrdnDBContext.NextPrdnOrder();

            Console.WriteLine((ord != null) ? ord.OrderNo : "nada");
            Console.ReadLine();

        }

        private static IQueryable<CST.Prdn.Data.ProductionJob> JobsForRun(decimal? runID)
        {

PrdnEntities PrdnDBContext = new PrdnEntities();

            if ((runID == null) || (runID < 1))
            {
                return null;
            }
            else
            {
                return (from j in PrdnDBContext.ProductionJobs
                        where j.RunID == runID
                        orderby j.RunSeqNo
                        select j);
            }
        }

        private static int JobsForRunCount(decimal? runID)
        {
            if ((runID == null) || (runID < 1))
            {
                return 0;
            }
            else
            {
                return JobsForRun(runID).Count();
            }
        }

        private static void JobList()
        {
            int jobCount = JobsForRunCount(1);
        }

        /// <summary>
        /// //////////////////////////////////////
        /// </summary>
        static void RequestList()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            List<string> states = new List<string>()
            {"NEW", "PROCESSING"};

            var requests = from r in PrdnDBContext.Requests
                           select r;

            requests = from r in requests
                       where states.Contains(r.StatusStr)
                       select r;

            var q = from r in requests
                    orderby r.RequestDt descending
                    select r.ID
                    ;

            ObjectQuery oq1 = (ObjectQuery)q;
            string s = oq1.ToTraceString();
            
            Console.WriteLine(s);

            Console.ReadLine();
        }

        static void NextSerial()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            Console.WriteLine(PrdnDBContext.NextSerialStr());
            Console.ReadLine();
        }

        static void Types()
        {
            PrdnEntities PrdnDBContext = new PrdnEntities();

            var types = from t in PrdnDBContext.ProductionTypes
                        orderby t.Code
                        select new
                        {
                            Text = t.Code + " " + t.Description,
                            t.ID
                        };



            ObjectQuery oq1 = (ObjectQuery)types;
            string s = oq1.ToTraceString();
            Console.WriteLine(s);

            Console.ReadLine();
        }

        static void PoLookup()
        {
            string prdnOrdNo;

            PrdnEntities prdnDbContext = new PrdnEntities();
            var nextPrdnOrd = from p in prdnDbContext.ProductionOrders
                    where p.ShipDay > DateTime.Today
                    group p by 1 into g
                    select g.Min(x => x.OrderNo);

            prdnOrdNo = nextPrdnOrd.ToList().FirstOrDefault();

            var maxPrdnOrd = from p in prdnDbContext.ProductionOrders
                              group p by 1 into g
                              select g.Max(x => x.OrderNo);

            prdnOrdNo = maxPrdnOrd.ToList().FirstOrDefault();

            ObjectQuery oq1 = (ObjectQuery)maxPrdnOrd;
            string s = oq1.ToTraceString();
            Console.WriteLine(prdnOrdNo);

            Console.ReadLine();
        }

        static void DatesTest()
        {
            PrdnEntities prdnDB = new PrdnEntities();

            var days = from calDay in prdnDB.CalendarDays
                       group calDay by 1 into g // Notice here, grouping by a constant value
                       select new
                       {
                           MinDate = g.Min(p => p.CalDay),
                           MaxDate = g.Max(p => p.CalDay)
                       };

            ObjectQuery oq2 = (ObjectQuery)days;
            string s = oq2.ToTraceString();
            Console.WriteLine(s);

            var dates = days.ToList().FirstOrDefault();

            if (dates != null)
            {


                Console.WriteLine(dates.MinDate.ToShortDateString()
                    + " " + dates.MaxDate.ToShortDateString());
            }
            Console.ReadLine();
        }

        static void SumTest()
        {
            PrdnEntities prdnDB = new PrdnEntities();

            var q = from day in prdnDB.CalendarDays.Include("ShipPrdnOrders").Include("ShipPrdnOrders.Runs")
                    select day
                    ;
                            

            //var l = q.ToList();

            ObjectQuery oq1 = (ObjectQuery)q;
            string s = oq1.ToTraceString();
            Console.WriteLine(s);

            foreach (CalendarDay day in q)
            {
                Console.WriteLine(day.CalDay.ToShortDateString()
                    +" "+ day.ShipPrdnOrders.Count()
                    +" " + day.ShipPrdnOrders.Sum(p => (int?)p.Runs.Count)
               );
            }

            Console.ReadLine();
        }

        public class PrdnCalendarDay
        {
            private bool existsInDB;

            public bool ExistsInDB
            {
                get { return existsInDB; }
                set { existsInDB = value; }
            }

            public DateTime CalDay { get; set; }

            public IEnumerable<CST.Prdn.Data.ProductionOrder> ShipPrdnOrders { get; set; }

            public int TotalRuns { get; set; }

            public bool FutureRunsExist { get; set; }

            public bool ShipDay { get { return !String.IsNullOrEmpty(ShipPrdnOrdNo); } }

            public string ShipPrdnOrdNo
            {
                get
                {
                    if (ShipPrdnOrders != null)
                    {
                        CST.Prdn.Data.ProductionOrder shipPo = ShipPrdnOrders.FirstOrDefault();
                        if (shipPo != null)
                        { return shipPo.OrderNo; }
                    }
                    return String.Empty;
                }
            }

            const string format = "MMMddyyyy";
            
            public bool Weekend()
            {
                return ((CalDay.DayOfWeek == DayOfWeek.Saturday) || (CalDay.DayOfWeek == DayOfWeek.Sunday));
            }

        }

        public static IEnumerable DaysInCalendar(DateTime firstDayOfCalendar, DateTime lastDayOfCalendar)
        {
            DateTime day = firstDayOfCalendar;
            while (day.Date <= lastDayOfCalendar)
            {
                yield return day.Date;
                day = day.AddDays(1).Date;
            }
        }

        static void CalTest()
        {
            DateTime firstDayOfCalendar = new DateTime(2012, 4, 29);
            DateTime lastDayOfCalendar = new DateTime(2012, 6, 2);

            var daysOfCal = from DateTime day in DaysInCalendar(firstDayOfCalendar, lastDayOfCalendar)
                            select day;

            PrdnEntities prdnDB = new PrdnEntities();

            // Oraclde ODP.Net generates bad sql for 10g, corelated subquery two levels deep
            //var dbCalDays = from day in prdnDB.CalendarDays
            //                where ((day.CalDay >= firstDayOfCalendar) && (day.CalDay <= lastDayOfCalendar))
            //                orderby day.CalDay
            //                select new PrdnCalendarDay()
            //                {
            //                    ExistsInDB = true,
            //                    CalDay = day.CalDay,
            //                    ShipPrdnOrders = day.ShipPrdnOrders,
            //                    TotalRuns = day.ShipPrdnOrders.Sum(p => (int?)p.Runs.Count) ?? 0
            //                };

            var dbCalDays = (from day in prdnDB.CalendarDays.Include("ShipPrdnOrders").Include("ShipPrdnOrders.Runs")
                    select day).ToList();
                    ;

            List<PrdnCalendarDay> dbPrdnCalDays = new List<PrdnCalendarDay>();

            foreach (var day in dbCalDays)
	        {
                dbPrdnCalDays.Add(
                    new PrdnCalendarDay()
                    {
                        ExistsInDB = true,
                        CalDay = day.CalDay,
                        ShipPrdnOrders = day.ShipPrdnOrders,
                        TotalRuns = day.ShipPrdnOrders.Sum(p => (int?)p.Runs.Count) ?? 0
                    }
                );
		 
	        }

            var prdnCalDays = from d in daysOfCal
                              join p in dbPrdnCalDays on d equals p.CalDay into outer
                              from o in outer.DefaultIfEmpty()
                              select o ?? new PrdnCalendarDay()
                              {
                                  ExistsInDB = false,
                                  CalDay = d,
                              };

            //ObjectQuery oq2 = (ObjectQuery)prdnCalDays;
            //s = oq2.ToTraceString();
            //Console.WriteLine(s);
            //Console.ReadLine();

            foreach (var prdnCalDay in prdnCalDays)
            {
                Console.WriteLine(prdnCalDay.CalDay.ToString());
            }

            Console.ReadLine();
        }

        static void List()
        {
            using (PrdnEntities ctx = new PrdnEntities())
            {
                var q = from x in ctx.ProductionJobs
                        orderby x.ID descending
                        //where x.StatusStr == sts
                        select new
                        {
                            x.ID,
                            x.Product.ProdCD,
                            x.Product.ProductType.ProdTypeCD,
                            x.Product.ProductType.Description
                        };

                ObjectQuery oq = (ObjectQuery)q;
                string s = oq.ToTraceString();
                Console.WriteLine(s);
                Console.ReadLine();
            }
        }

        
        static void daty()
        {
            using (PrdnEntities ctx = new PrdnEntities())
            {
                var q = from p in ctx.CalendarDays
                        orderby p.CalDay
                        select p;

                ObjectQuery oq = (ObjectQuery)q;
                string s = oq.ToTraceString();
                Console.WriteLine(s);
                Console.ReadLine();

                CalendarDay c = new CalendarDay();
                c.CalDay = DateTime.Today;
                ctx.CalendarDays.AddObject(c);
                ctx.SaveChanges();
            }
        }

    }
}
